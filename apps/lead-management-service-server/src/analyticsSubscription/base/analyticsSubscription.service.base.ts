/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AnalyticsSubscription as PrismaAnalyticsSubscription,
} from "@prisma/client";

export class AnalyticsSubscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyticsSubscriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analyticsSubscription.count(args);
  }

  async analyticsSubscriptions(
    args: Prisma.AnalyticsSubscriptionFindManyArgs
  ): Promise<PrismaAnalyticsSubscription[]> {
    return this.prisma.analyticsSubscription.findMany(args);
  }
  async analyticsSubscription(
    args: Prisma.AnalyticsSubscriptionFindUniqueArgs
  ): Promise<PrismaAnalyticsSubscription | null> {
    return this.prisma.analyticsSubscription.findUnique(args);
  }
  async createAnalyticsSubscription(
    args: Prisma.AnalyticsSubscriptionCreateArgs
  ): Promise<PrismaAnalyticsSubscription> {
    return this.prisma.analyticsSubscription.create(args);
  }
  async updateAnalyticsSubscription(
    args: Prisma.AnalyticsSubscriptionUpdateArgs
  ): Promise<PrismaAnalyticsSubscription> {
    return this.prisma.analyticsSubscription.update(args);
  }
  async deleteAnalyticsSubscription(
    args: Prisma.AnalyticsSubscriptionDeleteArgs
  ): Promise<PrismaAnalyticsSubscription> {
    return this.prisma.analyticsSubscription.delete(args);
  }
}
