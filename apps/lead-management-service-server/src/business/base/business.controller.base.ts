/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BusinessService } from "../business.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BusinessCreateInput } from "./BusinessCreateInput";
import { Business } from "./Business";
import { BusinessFindManyArgs } from "./BusinessFindManyArgs";
import { BusinessWhereUniqueInput } from "./BusinessWhereUniqueInput";
import { BusinessUpdateInput } from "./BusinessUpdateInput";
import { ProfessionalFindManyArgs } from "../../professional/base/ProfessionalFindManyArgs";
import { Professional } from "../../professional/base/Professional";
import { ProfessionalWhereUniqueInput } from "../../professional/base/ProfessionalWhereUniqueInput";
import { ProspectFindManyArgs } from "../../prospect/base/ProspectFindManyArgs";
import { Prospect } from "../../prospect/base/Prospect";
import { ProspectWhereUniqueInput } from "../../prospect/base/ProspectWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BusinessControllerBase {
  constructor(
    protected readonly service: BusinessService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Business })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBusiness(
    @common.Body() data: BusinessCreateInput
  ): Promise<Business> {
    return await this.service.createBusiness({
      data: {
        ...data,

        address: data.address
          ? {
              connect: data.address,
            }
          : undefined,
      },
      select: {
        address: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        industry: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Business] })
  @ApiNestedQuery(BusinessFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async businesses(@common.Req() request: Request): Promise<Business[]> {
    const args = plainToClass(BusinessFindManyArgs, request.query);
    return this.service.businesses({
      ...args,
      select: {
        address: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        industry: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async business(
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Business | null> {
    const result = await this.service.business({
      where: params,
      select: {
        address: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        industry: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBusiness(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() data: BusinessUpdateInput
  ): Promise<Business | null> {
    try {
      return await this.service.updateBusiness({
        where: params,
        data: {
          ...data,

          address: data.address
            ? {
                connect: data.address,
              }
            : undefined,
        },
        select: {
          address: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          industry: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBusiness(
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Business | null> {
    try {
      return await this.service.deleteBusiness({
        where: params,
        select: {
          address: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          industry: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/professionals")
  @ApiNestedQuery(ProfessionalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Professional",
    action: "read",
    possession: "any",
  })
  async findProfessionals(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Professional[]> {
    const query = plainToClass(ProfessionalFindManyArgs, request.query);
    const results = await this.service.findProfessionals(params.id, {
      ...query,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/professionals")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async connectProfessionals(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ProfessionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      professionals: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/professionals")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async updateProfessionals(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ProfessionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      professionals: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/professionals")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async disconnectProfessionals(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ProfessionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      professionals: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/prospects")
  @ApiNestedQuery(ProspectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Prospect",
    action: "read",
    possession: "any",
  })
  async findProspects(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Prospect[]> {
    const query = plainToClass(ProspectFindManyArgs, request.query);
    const results = await this.service.findProspects(params.id, {
      ...query,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        lead: {
          select: {
            id: true,
          },
        },

        professional: {
          select: {
            id: true,
          },
        },

        taskList: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/prospects")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async connectProspects(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ProspectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prospects: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/prospects")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async updateProspects(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ProspectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prospects: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/prospects")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async disconnectProspects(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ProspectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prospects: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }
}
