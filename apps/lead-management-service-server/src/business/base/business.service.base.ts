/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Business as PrismaBusiness,
  Professional as PrismaProfessional,
  Prospect as PrismaProspect,
  Address as PrismaAddress,
} from "@prisma/client";

export class BusinessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BusinessCountArgs, "select">): Promise<number> {
    return this.prisma.business.count(args);
  }

  async businesses(
    args: Prisma.BusinessFindManyArgs
  ): Promise<PrismaBusiness[]> {
    return this.prisma.business.findMany(args);
  }
  async business(
    args: Prisma.BusinessFindUniqueArgs
  ): Promise<PrismaBusiness | null> {
    return this.prisma.business.findUnique(args);
  }
  async createBusiness(
    args: Prisma.BusinessCreateArgs
  ): Promise<PrismaBusiness> {
    return this.prisma.business.create(args);
  }
  async updateBusiness(
    args: Prisma.BusinessUpdateArgs
  ): Promise<PrismaBusiness> {
    return this.prisma.business.update(args);
  }
  async deleteBusiness(
    args: Prisma.BusinessDeleteArgs
  ): Promise<PrismaBusiness> {
    return this.prisma.business.delete(args);
  }

  async findProfessionals(
    parentId: string,
    args: Prisma.ProfessionalFindManyArgs
  ): Promise<PrismaProfessional[]> {
    return this.prisma.business
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .professionals(args);
  }

  async findProspects(
    parentId: string,
    args: Prisma.ProspectFindManyArgs
  ): Promise<PrismaProspect[]> {
    return this.prisma.business
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .prospects(args);
  }

  async getAddress(parentId: string): Promise<PrismaAddress | null> {
    return this.prisma.business
      .findUnique({
        where: { id: parentId },
      })
      .address();
  }
}
