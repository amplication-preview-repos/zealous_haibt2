/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AddressWhereUniqueInput } from "../../address/base/AddressWhereUniqueInput";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ProfessionalListRelationFilter } from "../../professional/base/ProfessionalListRelationFilter";
import { ProspectListRelationFilter } from "../../prospect/base/ProspectListRelationFilter";

@InputType()
class BusinessWhereInput {
  @ApiProperty({
    required: false,
    type: () => AddressWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AddressWhereUniqueInput)
  @IsOptional()
  @Field(() => AddressWhereUniqueInput, {
    nullable: true,
  })
  address?: AddressWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  industry?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ProfessionalListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProfessionalListRelationFilter)
  @IsOptional()
  @Field(() => ProfessionalListRelationFilter, {
    nullable: true,
  })
  professionals?: ProfessionalListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProspectListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProspectListRelationFilter)
  @IsOptional()
  @Field(() => ProspectListRelationFilter, {
    nullable: true,
  })
  prospects?: ProspectListRelationFilter;
}

export { BusinessWhereInput as BusinessWhereInput };
