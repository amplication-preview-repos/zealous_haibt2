/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AnalyticsAddress } from "./AnalyticsAddress";
import { AnalyticsAddressCountArgs } from "./AnalyticsAddressCountArgs";
import { AnalyticsAddressFindManyArgs } from "./AnalyticsAddressFindManyArgs";
import { AnalyticsAddressFindUniqueArgs } from "./AnalyticsAddressFindUniqueArgs";
import { DeleteAnalyticsAddressArgs } from "./DeleteAnalyticsAddressArgs";
import { AnalyticsAddressService } from "../analyticsAddress.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AnalyticsAddress)
export class AnalyticsAddressResolverBase {
  constructor(
    protected readonly service: AnalyticsAddressService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "read",
    possession: "any",
  })
  async _analyticsAddressesMeta(
    @graphql.Args() args: AnalyticsAddressCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AnalyticsAddress])
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "read",
    possession: "any",
  })
  async analyticsAddresses(
    @graphql.Args() args: AnalyticsAddressFindManyArgs
  ): Promise<AnalyticsAddress[]> {
    return this.service.analyticsAddresses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AnalyticsAddress, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "read",
    possession: "own",
  })
  async analyticsAddress(
    @graphql.Args() args: AnalyticsAddressFindUniqueArgs
  ): Promise<AnalyticsAddress | null> {
    const result = await this.service.analyticsAddress(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AnalyticsAddress)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "delete",
    possession: "any",
  })
  async deleteAnalyticsAddress(
    @graphql.Args() args: DeleteAnalyticsAddressArgs
  ): Promise<AnalyticsAddress | null> {
    try {
      return await this.service.deleteAnalyticsAddress(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
