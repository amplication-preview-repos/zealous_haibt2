/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AnalyticsAddressService } from "../analyticsAddress.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AnalyticsAddressCreateInput } from "./AnalyticsAddressCreateInput";
import { AnalyticsAddress } from "./AnalyticsAddress";
import { AnalyticsAddressFindManyArgs } from "./AnalyticsAddressFindManyArgs";
import { AnalyticsAddressWhereUniqueInput } from "./AnalyticsAddressWhereUniqueInput";
import { AnalyticsAddressUpdateInput } from "./AnalyticsAddressUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AnalyticsAddressControllerBase {
  constructor(
    protected readonly service: AnalyticsAddressService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnalyticsAddress })
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAnalyticsAddress(
    @common.Body() data: AnalyticsAddressCreateInput
  ): Promise<AnalyticsAddress> {
    return await this.service.createAnalyticsAddress({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AnalyticsAddress] })
  @ApiNestedQuery(AnalyticsAddressFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async analyticsAddresses(
    @common.Req() request: Request
  ): Promise<AnalyticsAddress[]> {
    const args = plainToClass(AnalyticsAddressFindManyArgs, request.query);
    return this.service.analyticsAddresses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnalyticsAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async analyticsAddress(
    @common.Param() params: AnalyticsAddressWhereUniqueInput
  ): Promise<AnalyticsAddress | null> {
    const result = await this.service.analyticsAddress({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnalyticsAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAnalyticsAddress(
    @common.Param() params: AnalyticsAddressWhereUniqueInput,
    @common.Body() data: AnalyticsAddressUpdateInput
  ): Promise<AnalyticsAddress | null> {
    try {
      return await this.service.updateAnalyticsAddress({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnalyticsAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnalyticsAddress",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAnalyticsAddress(
    @common.Param() params: AnalyticsAddressWhereUniqueInput
  ): Promise<AnalyticsAddress | null> {
    try {
      return await this.service.deleteAnalyticsAddress({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
