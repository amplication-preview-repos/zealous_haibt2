/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Prospect } from "./Prospect";
import { ProspectCountArgs } from "./ProspectCountArgs";
import { ProspectFindManyArgs } from "./ProspectFindManyArgs";
import { ProspectFindUniqueArgs } from "./ProspectFindUniqueArgs";
import { CreateProspectArgs } from "./CreateProspectArgs";
import { UpdateProspectArgs } from "./UpdateProspectArgs";
import { DeleteProspectArgs } from "./DeleteProspectArgs";
import { Business } from "../../business/base/Business";
import { Lead } from "../../lead/base/Lead";
import { Professional } from "../../professional/base/Professional";
import { User } from "../../user/base/User";
import { ProspectService } from "../prospect.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Prospect)
export class ProspectResolverBase {
  constructor(
    protected readonly service: ProspectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Prospect",
    action: "read",
    possession: "any",
  })
  async _prospectsMeta(
    @graphql.Args() args: ProspectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Prospect])
  @nestAccessControl.UseRoles({
    resource: "Prospect",
    action: "read",
    possession: "any",
  })
  async prospects(
    @graphql.Args() args: ProspectFindManyArgs
  ): Promise<Prospect[]> {
    return this.service.prospects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Prospect, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Prospect",
    action: "read",
    possession: "own",
  })
  async prospect(
    @graphql.Args() args: ProspectFindUniqueArgs
  ): Promise<Prospect | null> {
    const result = await this.service.prospect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prospect)
  @nestAccessControl.UseRoles({
    resource: "Prospect",
    action: "create",
    possession: "any",
  })
  async createProspect(
    @graphql.Args() args: CreateProspectArgs
  ): Promise<Prospect> {
    return await this.service.createProspect({
      ...args,
      data: {
        ...args.data,

        business: args.data.business
          ? {
              connect: args.data.business,
            }
          : undefined,

        lead: args.data.lead
          ? {
              connect: args.data.lead,
            }
          : undefined,

        professional: args.data.professional
          ? {
              connect: args.data.professional,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prospect)
  @nestAccessControl.UseRoles({
    resource: "Prospect",
    action: "update",
    possession: "any",
  })
  async updateProspect(
    @graphql.Args() args: UpdateProspectArgs
  ): Promise<Prospect | null> {
    try {
      return await this.service.updateProspect({
        ...args,
        data: {
          ...args.data,

          business: args.data.business
            ? {
                connect: args.data.business,
              }
            : undefined,

          lead: args.data.lead
            ? {
                connect: args.data.lead,
              }
            : undefined,

          professional: args.data.professional
            ? {
                connect: args.data.professional,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Prospect)
  @nestAccessControl.UseRoles({
    resource: "Prospect",
    action: "delete",
    possession: "any",
  })
  async deleteProspect(
    @graphql.Args() args: DeleteProspectArgs
  ): Promise<Prospect | null> {
    try {
      return await this.service.deleteProspect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Business, {
    nullable: true,
    name: "business",
  })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "read",
    possession: "any",
  })
  async getBusiness(
    @graphql.Parent() parent: Prospect
  ): Promise<Business | null> {
    const result = await this.service.getBusiness(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Lead, {
    nullable: true,
    name: "lead",
  })
  @nestAccessControl.UseRoles({
    resource: "Lead",
    action: "read",
    possession: "any",
  })
  async getLead(@graphql.Parent() parent: Prospect): Promise<Lead | null> {
    const result = await this.service.getLead(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Professional, {
    nullable: true,
    name: "professional",
  })
  @nestAccessControl.UseRoles({
    resource: "Professional",
    action: "read",
    possession: "any",
  })
  async getProfessional(
    @graphql.Parent() parent: Prospect
  ): Promise<Professional | null> {
    const result = await this.service.getProfessional(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Prospect): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
