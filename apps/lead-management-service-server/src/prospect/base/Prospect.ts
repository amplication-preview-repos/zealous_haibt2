/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Business } from "../../business/base/Business";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Lead } from "../../lead/base/Lead";
import { Professional } from "../../professional/base/Professional";
import { EnumProspectTaskList } from "./EnumProspectTaskList";
import { User } from "../../user/base/User";

@ObjectType()
class Prospect {
  @ApiProperty({
    required: false,
    type: () => Business,
  })
  @ValidateNested()
  @Type(() => Business)
  @IsOptional()
  business?: Business | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Lead,
  })
  @ValidateNested()
  @Type(() => Lead)
  @IsOptional()
  lead?: Lead | null;

  @ApiProperty({
    required: false,
    type: () => Professional,
  })
  @ValidateNested()
  @Type(() => Professional)
  @IsOptional()
  professional?: Professional | null;

  @ApiProperty({
    required: false,
    enum: EnumProspectTaskList,
    isArray: true,
  })
  @IsEnum(EnumProspectTaskList, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumProspectTaskList], {
    nullable: true,
  })
  taskList?: Array<"Option1">;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;
}

export { Prospect as Prospect };
