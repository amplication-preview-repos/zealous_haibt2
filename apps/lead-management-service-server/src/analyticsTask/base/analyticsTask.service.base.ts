/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnalyticsTask as PrismaAnalyticsTask } from "@prisma/client";

export class AnalyticsTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyticsTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analyticsTask.count(args);
  }

  async analyticsTasks(
    args: Prisma.AnalyticsTaskFindManyArgs
  ): Promise<PrismaAnalyticsTask[]> {
    return this.prisma.analyticsTask.findMany(args);
  }
  async analyticsTask(
    args: Prisma.AnalyticsTaskFindUniqueArgs
  ): Promise<PrismaAnalyticsTask | null> {
    return this.prisma.analyticsTask.findUnique(args);
  }
  async createAnalyticsTask(
    args: Prisma.AnalyticsTaskCreateArgs
  ): Promise<PrismaAnalyticsTask> {
    return this.prisma.analyticsTask.create(args);
  }
  async updateAnalyticsTask(
    args: Prisma.AnalyticsTaskUpdateArgs
  ): Promise<PrismaAnalyticsTask> {
    return this.prisma.analyticsTask.update(args);
  }
  async deleteAnalyticsTask(
    args: Prisma.AnalyticsTaskDeleteArgs
  ): Promise<PrismaAnalyticsTask> {
    return this.prisma.analyticsTask.delete(args);
  }
}
