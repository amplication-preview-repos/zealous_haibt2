/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AnalyticsProfessional } from "./AnalyticsProfessional";
import { AnalyticsProfessionalCountArgs } from "./AnalyticsProfessionalCountArgs";
import { AnalyticsProfessionalFindManyArgs } from "./AnalyticsProfessionalFindManyArgs";
import { AnalyticsProfessionalFindUniqueArgs } from "./AnalyticsProfessionalFindUniqueArgs";
import { DeleteAnalyticsProfessionalArgs } from "./DeleteAnalyticsProfessionalArgs";
import { AnalyticsProfessionalService } from "../analyticsProfessional.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AnalyticsProfessional)
export class AnalyticsProfessionalResolverBase {
  constructor(
    protected readonly service: AnalyticsProfessionalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsProfessional",
    action: "read",
    possession: "any",
  })
  async _analyticsProfessionalsMeta(
    @graphql.Args() args: AnalyticsProfessionalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AnalyticsProfessional])
  @nestAccessControl.UseRoles({
    resource: "AnalyticsProfessional",
    action: "read",
    possession: "any",
  })
  async analyticsProfessionals(
    @graphql.Args() args: AnalyticsProfessionalFindManyArgs
  ): Promise<AnalyticsProfessional[]> {
    return this.service.analyticsProfessionals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AnalyticsProfessional, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AnalyticsProfessional",
    action: "read",
    possession: "own",
  })
  async analyticsProfessional(
    @graphql.Args() args: AnalyticsProfessionalFindUniqueArgs
  ): Promise<AnalyticsProfessional | null> {
    const result = await this.service.analyticsProfessional(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AnalyticsProfessional)
  @nestAccessControl.UseRoles({
    resource: "AnalyticsProfessional",
    action: "delete",
    possession: "any",
  })
  async deleteAnalyticsProfessional(
    @graphql.Args() args: DeleteAnalyticsProfessionalArgs
  ): Promise<AnalyticsProfessional | null> {
    try {
      return await this.service.deleteAnalyticsProfessional(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
