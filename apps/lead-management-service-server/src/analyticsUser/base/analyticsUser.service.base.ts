/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnalyticsUser as PrismaAnalyticsUser } from "@prisma/client";

export class AnalyticsUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyticsUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analyticsUser.count(args);
  }

  async analyticsUsers(
    args: Prisma.AnalyticsUserFindManyArgs
  ): Promise<PrismaAnalyticsUser[]> {
    return this.prisma.analyticsUser.findMany(args);
  }
  async analyticsUser(
    args: Prisma.AnalyticsUserFindUniqueArgs
  ): Promise<PrismaAnalyticsUser | null> {
    return this.prisma.analyticsUser.findUnique(args);
  }
  async createAnalyticsUser(
    args: Prisma.AnalyticsUserCreateArgs
  ): Promise<PrismaAnalyticsUser> {
    return this.prisma.analyticsUser.create(args);
  }
  async updateAnalyticsUser(
    args: Prisma.AnalyticsUserUpdateArgs
  ): Promise<PrismaAnalyticsUser> {
    return this.prisma.analyticsUser.update(args);
  }
  async deleteAnalyticsUser(
    args: Prisma.AnalyticsUserDeleteArgs
  ): Promise<PrismaAnalyticsUser> {
    return this.prisma.analyticsUser.delete(args);
  }
}
