/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AnalyticsCompany as PrismaAnalyticsCompany,
} from "@prisma/client";

export class AnalyticsCompanyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyticsCompanyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analyticsCompany.count(args);
  }

  async analyticsCompanies(
    args: Prisma.AnalyticsCompanyFindManyArgs
  ): Promise<PrismaAnalyticsCompany[]> {
    return this.prisma.analyticsCompany.findMany(args);
  }
  async analyticsCompany(
    args: Prisma.AnalyticsCompanyFindUniqueArgs
  ): Promise<PrismaAnalyticsCompany | null> {
    return this.prisma.analyticsCompany.findUnique(args);
  }
  async createAnalyticsCompany(
    args: Prisma.AnalyticsCompanyCreateArgs
  ): Promise<PrismaAnalyticsCompany> {
    return this.prisma.analyticsCompany.create(args);
  }
  async updateAnalyticsCompany(
    args: Prisma.AnalyticsCompanyUpdateArgs
  ): Promise<PrismaAnalyticsCompany> {
    return this.prisma.analyticsCompany.update(args);
  }
  async deleteAnalyticsCompany(
    args: Prisma.AnalyticsCompanyDeleteArgs
  ): Promise<PrismaAnalyticsCompany> {
    return this.prisma.analyticsCompany.delete(args);
  }
}
